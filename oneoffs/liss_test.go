// Longest increasing sub-sequence

package oneoffs

import (
	"fmt"
	"testing"
)

func Test_liss(t *testing.T) {
	initTestData()
	tests := []struct {
		name string
		f    func(*testing.T)
	}{
		{"liss", lissTest},
		// {"listOfIss", listOfIssTest},
	}
	for _, tt := range tests {
		t.Run(tt.name, tt.f)
	}
}

func lissTest(t *testing.T) {
	tests := []struct {
		seq     []int
		wantLen int
	}{
		{[]int{4, 3, 2, 1, 5, 1}, 2},
		// 0 < 1 < 2 < 3 < 4
		{[]int{0, 3, 3, 2, 1, 0, 3, 2, 0, 2, 2, 2, 3, 4, 3, 2, 0, 4, 4, 1, 3, 4, 1, 3, 1, 3, 0, 4, 3, 1, 0, 1, 2}, 5},
		// 4 < 6 < 7 < 8 < 9
		{[]int{2, 1, 7, 1, 5, 6, 9, 1, 3, 2, 9, 9, 7, 4, 9, 4, 7, 7, 2, 7, 2, 5, 9, 1, 0, 1, 3, 6, 8}, 6},
		{[]int{34, 378, 837, 101, 0, 747, 842, 148, 600, 854, 937, 635, 141, 484, 92, 763, 804, 207, 279, 763, 556, 199, 762, 334, 890, 377, 42, 904, 57, 438, 102, 989, 895, 190, 748, 734, 579, 8, 307, 457, 699, 711, 124, 491, 713, 162, 178, 981, 213, 496, 320, 281, 70, 853, 313, 791, 282, 934, 723, 808, 910, 245, 765, 78, 591, 218, 615, 622, 606, 710, 609, 867, 409, 676, 220, 752, 791, 415, 244, 802, 340, 442, 799, 888, 650, 656, 911, 167, 216, 729, 795, 22, 228, 101, 940, 491, 189, 96, 995, 873, 540, 730, 288, 55, 824, 554, 589, 445, 584, 846, 328, 69, 315, 713, 528, 196, 523, 522, 847, 756, 952, 205, 166, 527, 417, 857, 726, 290, 590, 485, 506, 908, 705, 495, 339, 793, 858, 115, 683, 239, 370, 156, 714, 140, 175, 986, 775, 930, 694, 64, 478, 417, 670, 696, 984, 119, 705, 294, 768, 614, 918, 990, 210, 178, 961, 307, 662, 885, 381, 485, 18, 289, 536, 421, 181, 506, 124, 64, 208, 229, 93, 366, 391, 673, 326, 230, 213, 537, 30, 448, 310, 754, 592, 942, 813, 503, 793, 199, 182, 943, 195, 650, 734, 984, 782, 156, 734, 834, 813, 367, 47, 762, 654, 879, 175, 801, 795, 41, 153, 217, 846, 42, 107, 372, 794, 225, 521, 480, 988, 562, 759, 531, 744, 16, 491, 335, 312, 398, 873, 234, 335, 723, 432, 892, 812, 912, 225, 422, 778, 782, 704, 548, 156, 257, 516, 510, 734, 371, 784, 801, 607, 478, 308, 852, 378, 82, 357, 26, 363, 327, 640, 876, 102, 992, 351, 600, 988, 940, 802, 914, 287, 322, 223, 693, 933, 672, 956, 869, 841, 992, 456, 884, 372, 528, 881, 272, 923, 868, 753, 294, 426, 682, 626, 621, 678, 938, 136, 753, 216, 160, 718, 506, 358, 944, 992, 512, 715, 956, 551, 821, 47, 669, 900, 944, 761, 667, 548, 913, 880, 3, 257, 574, 401, 540, 329, 281, 979, 526, 927, 779, 870, 696, 328, 778, 938, 252, 952, 458, 476, 897, 683, 683, 819, 340, 687, 838, 625, 325, 470, 981, 517, 73, 178, 222, 613, 585, 833, 68, 352, 574, 240, 915, 50, 976, 804, 838, 945, 546, 915, 270, 76, 251, 881, 840, 283, 211, 719, 532, 529, 703, 14, 790, 342, 476, 224, 115, 641, 572, 143, 978, 731, 896, 208, 572, 894, 355, 471, 673, 957, 774, 94, 889, 389, 101, 528, 619, 209, 933, 279, 526, 603, 472, 117, 945, 478, 583, 584, 561, 665, 458, 935, 879, 974, 215, 329, 691, 104, 333, 845, 601, 618, 12, 3, 166, 213, 740, 889, 111, 282, 766, 994, 998, 357, 658, 570, 635, 602, 870, 756, 499, 626, 607}, 40},
	}
	for i, tt := range tests {
		got := liss(tt.seq)
		if len(got) != tt.wantLen {
			t.Errorf("FAIL: expexted len: %d, got len: %d", tt.wantLen, len(got))
		} else {
			fmt.Printf("SUCCESS %d: got: %d\n", i, len(got))
		}
	}
}
func listOfIssTest(t *testing.T) {
	tests := []struct {
		seq     []int
		wantLen int
	}{
		// {[]int{4, 3, 2, 1, 5, 1}, 2},
		// 0 < 1 < 2 < 3 < 4
		{[]int{0, 3, 3, 2, 1, 0, 3, 2, 0, 2, 2, 2, 3, 4, 3, 2, 0, 4, 4, 1, 3, 4, 1, 3, 1, 3, 0, 4, 3, 1, 0, 1, 2}, 5},
		// 4 < 6 < 7 < 8 < 9
		// {[]int{2, 1, 7, 1, 5, 6, 9, 1, 3, 2, 9, 9, 7, 4, 9, 4, 7, 7, 2, 7, 2, 5, 9, 1, 0, 1, 3, 6, 8}, 6},
	}
	for _, tt := range tests {
		got := listOfIss(tt.seq)
		fmt.Println(got)
		// if len(got) != tt.wantLen {
		// 	t.Errorf("FAIL: expexted len: %d, got len: %d", tt.wantLen, len(got))
		// }
	}
}
